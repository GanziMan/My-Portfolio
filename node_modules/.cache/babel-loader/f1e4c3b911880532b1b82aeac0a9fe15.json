{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nexport const useTheme = () => {\n  _s();\n\n  // 브라우저 테마 정보 확인\n  const isBrowserDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  let initTheme = isBrowserDarkMode ? 'dark' : 'light'; // 사용자가 테마 설정을 직접 지정한 테마가 있는지 확인\n\n  const localSettingTheme = localStorage.getItem('theme'); // 지정한 테마가 존재한다면 해당 테마로 설정 없으면 브라우저 기본 설정 테마로 세팅 \n\n  if (localSettingTheme) {\n    initTheme = localSettingTheme;\n  }\n\n  const [theme, setTheme] = useState(initTheme);\n\n  const setMode = mode => {\n    // 테마정보 변경하면 localstorage 에 저장해 다음에도 지정한 값으로 테마가 보이도록 설정\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => setMode(theme === 'light' ? 'dark' : 'light');\n\n  return [theme, toggleTheme];\n};\n\n_s(useTheme, \"wW0j4LvzwwgDUtULhAL8SFF92lY=\");","map":{"version":3,"sources":["/Users/gimbeomsu/my-app/src/useTheme.js"],"names":["useState","useTheme","isBrowserDarkMode","window","matchMedia","matches","initTheme","localSettingTheme","localStorage","getItem","theme","setTheme","setMode","mode","setItem","toggleTheme"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAE1B;AACA,QAAMC,iBAAiB,GAAGC,MAAM,CAACC,UAAP,IAAqBD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAAjG;AACA,MAAIC,SAAS,GAAGJ,iBAAiB,GAAG,MAAH,GAAY,OAA7C,CAJ0B,CAM1B;;AACA,QAAMK,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA1B,CAP0B,CAS1B;;AACA,MAAIF,iBAAJ,EAAuB;AACnBD,IAAAA,SAAS,GAAGC,iBAAZ;AACH;;AAED,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACM,SAAD,CAAlC;;AAEA,QAAMM,OAAO,GAAGC,IAAI,IAAI;AACpB;AACAV,IAAAA,MAAM,CAACK,YAAP,CAAoBM,OAApB,CAA4B,OAA5B,EAAqCD,IAArC;AACAF,IAAAA,QAAQ,CAACE,IAAD,CAAR;AACH,GAJD;;AAMA,QAAME,WAAW,GAAG,MAAMH,OAAO,CAACF,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,OAA9B,CAAjC;;AAEA,SAAO,CAACA,KAAD,EAAQK,WAAR,CAAP;AACH,CAzBM;;GAAMd,Q","sourcesContent":["import {useState} from 'react';\n\nexport const useTheme = () => {\n\n    // 브라우저 테마 정보 확인\n    const isBrowserDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    let initTheme = isBrowserDarkMode ? 'dark' : 'light';\n    \n    // 사용자가 테마 설정을 직접 지정한 테마가 있는지 확인\n    const localSettingTheme = localStorage.getItem('theme');\n\n    // 지정한 테마가 존재한다면 해당 테마로 설정 없으면 브라우저 기본 설정 테마로 세팅 \n    if (localSettingTheme) {\n        initTheme = localSettingTheme;\n    }\n\n    const [theme, setTheme] = useState(initTheme);\n\n    const setMode = mode => {\n        // 테마정보 변경하면 localstorage 에 저장해 다음에도 지정한 값으로 테마가 보이도록 설정\n        window.localStorage.setItem('theme', mode)\n        setTheme(mode)\n    };\n\n    const toggleTheme = () => setMode(theme === 'light' ? 'dark' : 'light');\n\n    return [theme, toggleTheme];\n};"]},"metadata":{},"sourceType":"module"}