{"ast":null,"code":"import * as React from 'react';\nimport { Platform } from 'react-native';\nimport getNode from './getNode';\nexport default function createPseudoHook(_ref) {\n  let {\n    events\n  } = _ref;\n  return function (ref) {\n    if ( // Pseudo classes only work in the browser\n    Platform.OS !== 'web') {\n      return false;\n    }\n\n    const [isActive, setActive] = React.useState(false);\n    React.useEffect(() => {\n      const [eventIn, eventOut] = events;\n      const node = getNode(ref);\n\n      if (!node) {\n        return;\n      }\n\n      const resolve = value => {\n        setActive(value);\n      }; // @ts-ignore\n\n\n      const onStart = resolve.bind(this, true); // @ts-ignore\n\n      const onEnd = resolve.bind(this, false);\n      node.addEventListener(eventIn, onStart);\n      node.addEventListener(eventOut, onEnd); // Special case for useActive to respond when the user drags out of the view and releases.\n\n      if (eventOut === 'mouseup') {\n        document.addEventListener(eventOut, onEnd, false);\n      }\n\n      return () => {\n        document.removeEventListener(eventOut, onEnd, false);\n        node.removeEventListener(eventIn, onStart);\n        node.removeEventListener(eventOut, onEnd);\n      };\n    }, [ref && ref.current]);\n    return isActive;\n  };\n}","map":{"version":3,"sources":["/Users/gimbeomsu/Desktop/my-app/node_modules/react-native-web-hooks/src/createPseudoHook.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,cAAzB;AACA,OAAO,OAAP,MAAoB,WAApB;AAEA,eAAc,SAAU,gBAAV,OAA8D;AAAA,MAAhC;AAAE,IAAA;AAAF,GAAgC;AAC1E,SAAO,UAAS,GAAT,EAAY;AACjB,SACE;AACA,IAAA,QAAQ,CAAC,EAAT,KAAgB,KAFlB,EAGE;AACA,aAAO,KAAP;AACD;;AAED,UAAM,CAAC,QAAD,EAAW,SAAX,IAAwB,KAAK,CAAC,QAAN,CAAe,KAAf,CAA9B;AAEA,IAAA,KAAK,CAAC,SAAN,CAAgB,MAAK;AACnB,YAAM,CAAC,OAAD,EAAU,QAAV,IAAsB,MAA5B;AAEA,YAAM,IAAI,GAAG,OAAO,CAAC,GAAD,CAApB;;AACA,UAAI,CAAC,IAAL,EAAW;AACT;AACD;;AACD,YAAM,OAAO,GAAG,KAAK,IAAG;AACtB,QAAA,SAAS,CAAC,KAAD,CAAT;AACD,OAFD,CAPmB,CAWnB;;;AACA,YAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,IAAnB,CAAhB,CAZmB,CAanB;;AACA,YAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,KAAnB,CAAd;AAEA,MAAA,IAAI,CAAC,gBAAL,CAAsB,OAAtB,EAA+B,OAA/B;AACA,MAAA,IAAI,CAAC,gBAAL,CAAsB,QAAtB,EAAgC,KAAhC,EAjBmB,CAmBnB;;AACA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,QAAA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,KAApC,EAA2C,KAA3C;AACD;;AACD,aAAO,MAAK;AACV,QAAA,QAAQ,CAAC,mBAAT,CAA6B,QAA7B,EAAuC,KAAvC,EAA8C,KAA9C;AACA,QAAA,IAAI,CAAC,mBAAL,CAAyB,OAAzB,EAAkC,OAAlC;AACA,QAAA,IAAI,CAAC,mBAAL,CAAyB,QAAzB,EAAmC,KAAnC;AACD,OAJD;AAKD,KA5BD,EA4BG,CAAC,GAAG,IAAI,GAAG,CAAC,OAAZ,CA5BH;AA8BA,WAAO,QAAP;AACD,GAzCD;AA0CD","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport getNode from './getNode'\n\nexport default function createPseudoHook<T>({ events }: { events: string[] }): (ref: React.MutableRefObject<T>) => any {\n  return function(ref) {\n    if (\n      // Pseudo classes only work in the browser\n      Platform.OS !== 'web'\n    ) {\n      return false;\n    }\n  \n    const [isActive, setActive] = React.useState(false);\n\n    React.useEffect(() => {\n      const [eventIn, eventOut] = events;\n\n      const node = getNode(ref);\n      if (!node) {\n        return;\n      }\n      const resolve = value => {\n        setActive(value);\n      };\n\n      // @ts-ignore\n      const onStart = resolve.bind(this, true);\n      // @ts-ignore\n      const onEnd = resolve.bind(this, false);\n\n      node.addEventListener(eventIn, onStart);\n      node.addEventListener(eventOut, onEnd);\n\n      // Special case for useActive to respond when the user drags out of the view and releases.\n      if (eventOut === 'mouseup') {\n        document.addEventListener(eventOut, onEnd, false);\n      }\n      return () => {\n        document.removeEventListener(eventOut, onEnd, false);\n        node.removeEventListener(eventIn, onStart);\n        node.removeEventListener(eventOut, onEnd);\n      };\n    }, [ref && ref.current]);\n\n    return isActive\n  };\n}\n"]},"metadata":{},"sourceType":"module"}