{"ast":null,"code":"import * as React from 'react';\nimport { element, func, oneOfType, oneOf } from 'prop-types';\nimport { Dimensions } from 'react-native';\nexport default class Resizable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resize = props => {\n      const {\n        [this.props.target]: target = {}\n      } = props;\n      this.setState(state => ({ ...state,\n        ...target\n      }));\n    };\n\n    this.state = { ...Dimensions.get(props.target)\n    };\n  }\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this.resize);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.resize);\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const child = typeof children === 'function' ? children(this.state) : children;\n    return React.cloneElement(React.Children.only(child), {});\n  }\n\n}\nResizable.displayName = 'Resizable';\nResizable.propTypes = {\n  children: oneOfType([func, element]),\n  target: oneOf(['window', 'screen'])\n};\nResizable.defaultProps = {\n  target: 'window'\n};","map":{"version":3,"sources":["/Users/gimbeomsu/my-app/node_modules/react-native-web-hooks/src/Resizable.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,OAAT,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,KAAnC,QAAgD,YAAhD;AACA,SAAS,UAAT,QAA2B,cAA3B;AAEA,eAAc,MAAO,SAAP,SAAyB,KAAK,CAAC,SAA/B,CAAyE;AAYrF,EAAA,WAAA,CAAY,KAAZ,EAAiB;AACf,UAAM,KAAN;;AAeF,SAAA,MAAA,GAAS,KAAK,IAAG;AACf,YAAM;AAAE,SAAC,KAAK,KAAL,CAAW,MAAZ,GAAqB,MAAM,GAAG;AAAhC,UAAuC,KAA7C;AACA,WAAK,QAAL,CAAc,KAAK,KAAK,EAAE,GAAG,KAAL;AAAY,WAAG;AAAf,OAAL,CAAnB;AACD,KAHD;;AAbE,SAAK,KAAL,GAAa,EACX,GAAG,UAAU,CAAC,GAAX,CAAe,KAAK,CAAC,MAArB;AADQ,KAAb;AAGD;;AAED,EAAA,iBAAiB,GAAA;AACf,IAAA,UAAU,CAAC,gBAAX,CAA4B,QAA5B,EAAsC,KAAK,MAA3C;AACD;;AAED,EAAA,oBAAoB,GAAA;AAClB,IAAA,UAAU,CAAC,mBAAX,CAA+B,QAA/B,EAAyC,KAAK,MAA9C;AACD;;AAOD,EAAA,MAAM,GAAA;AACJ,UAAM;AAAE,MAAA;AAAF,QAAe,KAAK,KAA1B;AACA,UAAM,KAAK,GAAG,OAAO,QAAP,KAAoB,UAApB,GAAiC,QAAQ,CAAC,KAAK,KAAN,CAAzC,GAAwD,QAAtE;AAEA,WAAO,KAAK,CAAC,YAAN,CAAmB,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAApB,CAAnB,EAA+C,EAA/C,CAAP;AACD;;AAtCoF;AAC9E,SAAA,CAAA,WAAA,GAAc,WAAd;AAEA,SAAA,CAAA,SAAA,GAAY;AACjB,EAAA,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAD,EAAO,OAAP,CAAD,CADF;AAEjB,EAAA,MAAM,EAAE,KAAK,CAAC,CAAC,QAAD,EAAW,QAAX,CAAD;AAFI,CAAZ;AAKA,SAAA,CAAA,YAAA,GAAe;AACpB,EAAA,MAAM,EAAE;AADY,CAAf","sourcesContent":["import * as React from 'react';\nimport { element, func, oneOfType, oneOf } from 'prop-types';\nimport { Dimensions } from 'react-native';\n\nexport default class Resizable extends React.Component<{ target: 'window' | 'screen' }> {\n  static displayName = 'Resizable';\n\n  static propTypes = {\n    children: oneOfType([func, element]),\n    target: oneOf(['window', 'screen']),\n  };\n\n  static defaultProps = {\n    target: 'window',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...Dimensions.get(props.target),\n    };\n  }\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this.resize);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.resize);\n  }\n\n  resize = props => {\n    const { [this.props.target]: target = {} } = props;\n    this.setState(state => ({ ...state, ...target }));\n  };\n\n  render() {\n    const { children } = this.props;\n    const child = typeof children === 'function' ? children(this.state) : children;\n\n    return React.cloneElement(React.Children.only(child), {});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}