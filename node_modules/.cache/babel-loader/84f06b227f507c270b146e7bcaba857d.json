{"ast":null,"code":"// By @necolas:\n// https://github.com/necolas/react-native-web/blob/master/docs/guides/web-recipes.md\nimport { element, func, oneOfType } from 'prop-types';\nimport * as React from 'react';\nimport isHoverEnabled from './isHoverEnabled';\nexport default class Hoverable extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isHovered: false,\n      showHover: true\n    };\n\n    this._handleMouseEnter = e => {\n      if (isHoverEnabled() && !this.state.isHovered) {\n        const {\n          onHoverIn\n        } = this.props;\n        if (onHoverIn) onHoverIn();\n        this.setState(state => ({ ...state,\n          isHovered: true\n        }));\n      }\n    };\n\n    this._handleMouseLeave = e => {\n      if (this.state.isHovered) {\n        const {\n          onHoverOut\n        } = this.props;\n        if (onHoverOut) onHoverOut();\n        this.setState(state => ({ ...state,\n          isHovered: false\n        }));\n      }\n    };\n\n    this._handleGrant = () => {\n      this.setState(state => ({ ...state,\n        showHover: false\n      }));\n    };\n\n    this._handleRelease = () => {\n      this.setState(state => ({ ...state,\n        showHover: true\n      }));\n    };\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const child = typeof children === 'function' ? children(this.state.showHover && this.state.isHovered) : children;\n    return React.cloneElement(React.Children.only(child), {\n      onMouseEnter: this._handleMouseEnter,\n      onMouseLeave: this._handleMouseLeave,\n      // prevent hover showing while responder\n      onResponderGrant: this._handleGrant,\n      onResponderRelease: this._handleRelease,\n      // if child is Touchable\n      onPressIn: this._handleGrant,\n      onPressOut: this._handleRelease\n    });\n  }\n\n}\nHoverable.displayName = 'Hoverable';\nHoverable.propTypes = {\n  children: oneOfType([func, element]),\n  onHoverIn: func,\n  onHoverOut: func\n};","map":{"version":3,"sources":["/Users/gimbeomsu/my-app/node_modules/react-native-web-hooks/src/Hoverable.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,OAAT,EAAkB,IAAlB,EAAwB,SAAxB,QAAyC,YAAzC;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,OAAO,cAAP,MAA2B,kBAA3B;AAEA,eAAc,MAAO,SAAP,SAAyB,KAAK,CAAC,SAA/B,CAAgM;AAA9M,EAAA,WAAA,GAAA;;AAQE,SAAA,KAAA,GAAQ;AAAE,MAAA,SAAS,EAAE,KAAb;AAAoB,MAAA,SAAS,EAAE;AAA/B,KAAR;;AAEA,SAAA,iBAAA,GAAoB,CAAC,IAAG;AACtB,UAAI,cAAc,MAAM,CAAC,KAAK,KAAL,CAAW,SAApC,EAA+C;AAC7C,cAAM;AAAE,UAAA;AAAF,YAAgB,KAAK,KAA3B;AACA,YAAI,SAAJ,EAAe,SAAS;AACxB,aAAK,QAAL,CAAc,KAAK,KAAK,EAAE,GAAG,KAAL;AAAY,UAAA,SAAS,EAAE;AAAvB,SAAL,CAAnB;AACD;AACF,KAND;;AAQA,SAAA,iBAAA,GAAoB,CAAC,IAAG;AACtB,UAAI,KAAK,KAAL,CAAW,SAAf,EAA0B;AACxB,cAAM;AAAE,UAAA;AAAF,YAAiB,KAAK,KAA5B;AACA,YAAI,UAAJ,EAAgB,UAAU;AAC1B,aAAK,QAAL,CAAc,KAAK,KAAK,EAAE,GAAG,KAAL;AAAY,UAAA,SAAS,EAAE;AAAvB,SAAL,CAAnB;AACD;AACF,KAND;;AAQA,SAAA,YAAA,GAAe,MAAK;AAClB,WAAK,QAAL,CAAc,KAAK,KAAK,EAAE,GAAG,KAAL;AAAY,QAAA,SAAS,EAAE;AAAvB,OAAL,CAAnB;AACD,KAFD;;AAIA,SAAA,cAAA,GAAiB,MAAK;AACpB,WAAK,QAAL,CAAc,KAAK,KAAK,EAAE,GAAG,KAAL;AAAY,QAAA,SAAS,EAAE;AAAvB,OAAL,CAAnB;AACD,KAFD;AAsBD;;AAlBC,EAAA,MAAM,GAAA;AACJ,UAAM;AAAE,MAAA;AAAF,QAAe,KAAK,KAA1B;AACA,UAAM,KAAK,GACT,OAAO,QAAP,KAAoB,UAApB,GACI,QAAQ,CAAC,KAAK,KAAL,CAAW,SAAX,IAAwB,KAAK,KAAL,CAAW,SAApC,CADZ,GAEI,QAHN;AAKA,WAAO,KAAK,CAAC,YAAN,CAAmB,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAApB,CAAnB,EAA+C;AACpD,MAAA,YAAY,EAAE,KAAK,iBADiC;AAEpD,MAAA,YAAY,EAAE,KAAK,iBAFiC;AAGpD;AACA,MAAA,gBAAgB,EAAE,KAAK,YAJ6B;AAKpD,MAAA,kBAAkB,EAAE,KAAK,cAL2B;AAMpD;AACA,MAAA,SAAS,EAAE,KAAK,YAPoC;AAQpD,MAAA,UAAU,EAAE,KAAK;AARmC,KAA/C,CAAP;AAUD;;AAnD2M;AACrM,SAAA,CAAA,WAAA,GAAc,WAAd;AACA,SAAA,CAAA,SAAA,GAAY;AACjB,EAAA,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAD,EAAO,OAAP,CAAD,CADF;AAEjB,EAAA,SAAS,EAAE,IAFM;AAGjB,EAAA,UAAU,EAAE;AAHK,CAAZ","sourcesContent":["// By @necolas:\n// https://github.com/necolas/react-native-web/blob/master/docs/guides/web-recipes.md\nimport { element, func, oneOfType } from 'prop-types';\nimport * as React from 'react';\n\nimport isHoverEnabled from './isHoverEnabled';\n\nexport default class Hoverable extends React.Component<{ children: (isHovered: boolean) => any | React.ReactChild; onHoverIn?: Function; onHoverOut?: Function }, { isHovered: boolean; showHover: boolean; }> {\n  static displayName = 'Hoverable';\n  static propTypes = {\n    children: oneOfType([func, element]),\n    onHoverIn: func,\n    onHoverOut: func,\n  };\n\n  state = { isHovered: false, showHover: true };\n\n  _handleMouseEnter = e => {\n    if (isHoverEnabled() && !this.state.isHovered) {\n      const { onHoverIn } = this.props;\n      if (onHoverIn) onHoverIn();\n      this.setState(state => ({ ...state, isHovered: true }));\n    }\n  };\n\n  _handleMouseLeave = e => {\n    if (this.state.isHovered) {\n      const { onHoverOut } = this.props;\n      if (onHoverOut) onHoverOut();\n      this.setState(state => ({ ...state, isHovered: false }));\n    }\n  };\n\n  _handleGrant = () => {\n    this.setState(state => ({ ...state, showHover: false }));\n  };\n\n  _handleRelease = () => {\n    this.setState(state => ({ ...state, showHover: true }));\n  };\n\n  render() {\n    const { children } = this.props;\n    const child =\n      typeof children === 'function'\n        ? children(this.state.showHover && this.state.isHovered)\n        : children;\n\n    return React.cloneElement(React.Children.only(child), {\n      onMouseEnter: this._handleMouseEnter,\n      onMouseLeave: this._handleMouseLeave,\n      // prevent hover showing while responder\n      onResponderGrant: this._handleGrant,\n      onResponderRelease: this._handleRelease,\n      // if child is Touchable\n      onPressIn: this._handleGrant,\n      onPressOut: this._handleRelease,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}